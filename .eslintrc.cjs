const path = require('path');

module.exports = {
  root: true,
  env: {
    browser: true,
    es2020: true,
    node: true,
  },
  extends: [
    'eslint:recommended',
    'prettier',
    'plugin:import/errors',
    'plugin:import/warnings',
    'plugin:react/recommended',
    'plugin:import/typescript',
    'plugin:@typescript-eslint/recommended-type-checked',
    'plugin:@typescript-eslint/stylistic-type-checked',
    'plugin:react-hooks/recommended',
  ],
  globals: {
    Atomics: 'readonly',
    SharedArrayBuffer: 'readonly',
  },
  ignorePatterns: ['dist', '.eslintrc.cjs', '*.config.js', '*-env.d.ts'],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 'latest',
    ecmaFeatures: {
      jsx: true,
    },
    sourceType: 'module',
    project: ['./tsconfig.json', './tsconfig.webpack.json'],
    tsconfigRootDir: __dirname,
  },
  plugins: ['@typescript-eslint', 'import', 'prettier', 'react', 'react-hooks'],
  rules: {
    // Layout & Formatting
    'array-bracket-newline': ['error', { multiline: true }],
    'array-bracket-spacing': ['error', 'never'],
    'array-element-newline': ['error', 'consistent'],
    'arrow-parens': ['error', 'always'],
    'arrow-spacing': ['error', { before: true, after: true }],
    'block-spacing': 'error',
    'brace-style': ['error', '1tbs', { allowSingleLine: false }],
    'comma-dangle': ['error', 'only-multiline'],
    'comma-spacing': ['error', { before: false, after: true }],
    'comma-style': ['error', 'last'],
    'computed-property-spacing': ['error', 'never'],
    'dot-location': ['error', 'property'],
    'eol-last': ['error', 'always'],
    'func-call-spacing': ['error', 'never'],
    'function-call-argument-newline': ['error', 'consistent'],
    'function-paren-newline': 'off',
    'jsx-quotes': ['error', 'prefer-double'],
    'key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
    'keyword-spacing': ['error', { before: true, after: true }],
    'line-comment-position': ['warn', { position: 'above' }],
    '@typescript-eslint/lines-around-comment': [
      'warn',
      {
        beforeBlockComment: true,
        allowBlockStart: true,
        allowArrayStart: true,
        allowObjectStart: true,
        allowClassStart: true,
        allowEnumStart: true,
        allowInterfaceStart: true,
        allowTypeStart: true,
        allowModuleStart: true,
      },
    ],
    'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
    'max-len': [
      'error',
      {
        code: 100,
        tabWidth: 2,
        ignoreComments: true,
        ignoreUrls: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
        ignoreRegExpLiterals: true,
      },
    ],
    'max-statements-per-line': ['error', { max: 1 }],
    'new-parens': 'error',
    'newline-per-chained-call': ['error', { ignoreChainWithDepth: 3 }],
    'no-multi-spaces': 'error',
    'no-multiple-empty-lines': 'error',
    'no-trailing-spaces': 'error',
    'no-whitespace-before-property': 'error',
    'object-curly-newline': ['error', { consistent: true }],
    'object-property-newline': ['warn', { allowAllPropertiesOnSameLine: true }],
    'operator-linebreak': ['error', 'after', { overrides: { '?': 'before', ':': 'before' } }],
    'padding-line-between-statements': [
      'error',
      {
        blankLine: 'always',
        prev: '*',
        next: ['block', 'block-like', 'return', 'class', 'export', 'for', 'while', 'if'],
      },
      {
        blankLine: 'always',
        prev: ['block', 'block-like', 'const', 'let', 'var'],
        next: '*',
      },
      {
        blankLine: 'any',
        prev: ['const', 'let', 'var'],
        next: ['const', 'let', 'var'],
      },
    ],
    quotes: ['error', 'single'],
    'rest-spread-spacing': ['error', 'never'],
    semi: ['error', 'always'],
    'semi-spacing': 'error',
    'semi-style': ['error', 'last'],
    'space-before-blocks': 'error',
    'space-in-parens': ['error', 'never'],
    'space-infix-ops': 'error',
    'space-unary-ops': 'error',
    'switch-colon-spacing': ['error', { after: true, before: false }],
    'template-curly-spacing': 'error',
    'template-tag-spacing': 'error',
    // Suggestions
    camelcase: 'off',
    'consistent-return': 'warn',
    curly: ['error', 'all'],
    'dot-notation': 'error',
    eqeqeq: ['error', 'always'],
    'max-classes-per-file': 'error',
    'new-cap': ['error', { newIsCap: true }],
    'no-alert': 'error',
    'no-bitwise': 'error',
    'no-console': 'warn',
    'no-else-return': 'error',
    'no-implicit-coercion': 'error',
    'no-lonely-if': 'error',
    'no-multi-assign': 'error',
    'no-negated-condition': 'error',
    'no-param-reassign': 'error',
    'no-redeclare': 'error',
    'no-sequences': 'error',
    'no-shadow': 'off',
    'no-unneeded-ternary': 'error',
    'no-useless-return': 'error',
    'no-var': 'error',
    'no-warning-comments': 'warn',
    'prefer-arrow-callback': 'error',
    'prefer-const': 'error',
    'spaced-comment': ['error', 'always'],
    yoda: 'error',
    // Import plugin
    'import/order': [
      'error',
      {
        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index'],
        alphabetize: {
          order: 'asc',
        },
        'newlines-between': 'always',
      },
    ],
    'import/default': 'off',
    'import/no-named-as-default': 'off',
    'import/no-relative-packages': 'error',
    'import/no-useless-path-segments': 'error',
    'import/no-self-import': 'error',
    'import/first': 'error',
    'import/no-duplicates': 'error',
    'import/newline-after-import': 'error',
    // Prettier
    'prettier/prettier': 'error',
    // React
    'react/prop-types': 'off',
    'react/boolean-prop-naming': 'error',
    'react/hook-use-state': 'error',
    'react/no-children-prop': 'error',
    'react/no-multi-comp': 'error',
    'react/no-this-in-sfc': 'error',
    'react/no-typos': 'error',
    'react/no-unknown-property': [
      2,
      {
        ignore: ['styleName'],
      },
    ],
    'react/no-unused-state': 'error',
    'react/jsx-boolean-value': 'error',
    'react/jsx-closing-tag-location': 'error',
    'react/jsx-indent': ['error', 2],
    'react/jsx-newline': ['error', { prevent: true }],
    'react/jsx-no-useless-fragment': 'error',
    'react/jsx-pascal-case': 'error',
    'react/prefer-stateless-function': 'error',
    'react/display-name': 'off',
    'react-hooks/exhaustive-deps': 'warn',
    // Typescript
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/camelcase': 'off',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-shadow': 'error',
    '@typescript-eslint/consistent-indexed-object-style': 'off',
    '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true }],
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: ['parameter'],
        format: ['camelCase', 'PascalCase'],
      },
      {
        selector: ['typeProperty', 'objectLiteralProperty'],
        format: ['camelCase', 'snake_case', 'PascalCase', 'UPPER_CASE'],
        leadingUnderscore: 'allow',
      },
      {
        selector: ['memberLike'],
        format: ['camelCase', 'UPPER_CASE'],
      },
      {
        selector: ['memberLike'],
        modifiers: ['private'],
        format: ['camelCase'],
        leadingUnderscore: 'require',
      },
      {
        selector: ['memberLike'],
        modifiers: ['protected'],
        format: ['camelCase'],
        leadingUnderscore: 'require',
      },
      {
        selector: ['classProperty'],
        modifiers: ['readonly'],
        format: ['camelCase', 'UPPER_CASE'],
      },
      {
        selector: ['classProperty'],
        modifiers: ['private', 'readonly'],
        format: ['camelCase', 'UPPER_CASE'],
        leadingUnderscore: 'require',
      },
      {
        selector: ['classProperty'],
        modifiers: ['protected', 'readonly'],
        format: ['camelCase', 'UPPER_CASE'],
        leadingUnderscore: 'require',
      },
      {
        selector: ['classProperty'],
        modifiers: ['private', 'readonly'],
        types: ['boolean', 'number', 'string', 'array'],
        format: ['UPPER_CASE'],
        leadingUnderscore: 'require',
      },
      {
        selector: ['classProperty'],
        modifiers: ['protected', 'readonly'],
        types: ['boolean', 'number', 'string', 'array'],
        format: ['UPPER_CASE'],
        leadingUnderscore: 'require',
      },
      {
        selector: ['variable'],
        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
      },
      {
        selector: ['typeLike'],
        format: ['PascalCase'],
      },
      {
        selector: ['import'],
        format: ['PascalCase', 'camelCase'],
      },
      {
        selector: ['default'],
        format: ['camelCase'],
      },
    ],
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ]
  },
  settings: {
    'import/parsers': {
      '@typescript-eslint/parser': ['.ts', '.tsx', '.scss', '.svg'],
    },
    'import/resolver': {
      typescript: {
        project: path.resolve('./tsconfig.json'),
      },
    },
    'import/external-module-folders': ['node_modules', 'node_modules/@types'],
    react: {
      version: 'detect',
    },
  },
};
